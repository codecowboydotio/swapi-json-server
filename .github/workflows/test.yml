# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# TEST
name: Create and publish a Docker image

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  lint-check:
    name: lint-check
    # we had issues with ubuntu, currently using MacOS
    runs-on: ubuntu-latest
    steps:

      - name: Lint
        run: echo "Your linting goes here..."

  format-check:
    name: format-check
    runs-on: ubuntu-latest
    steps:

    - name: format-check
      run: echo "Your format checking goes here..."

  unit-tests:
    needs: [lint-check,format-check]
    name: unit-tests
    runs-on: ubuntu-latest
    steps:
    - run: echo "Your Unit tests go here..."

  debug-print-event-data:
    name: debug-print-event-data
    runs-on: ubuntu-latest
    steps:

    - name: Print event data for debug purposes
      env:
        EVENT: ${{ toJSON( github.event ) }}
      run: echo "$EVENT"

  iac-scan:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Run IAC security scan
        run: |
          curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
          chmod 700 ./sysdig-cli-scanner
          echo "running IAC  scan"
          SECURE_API_TOKEN=${{ secrets.SYSDIG_API_TOKEN }} ./sysdig-cli-scanner --iac -r -f H --apiurl ${{ secrets.SYSDIG_URL }} .
          sleep 5

  build-and-scan-image:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Build container images
        run: |
          docker build --tag ${{ github.event.repository.name }} .
          docker images
      - name: Run Orca Container Image Scan
        run: |
          curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
          chmod 700 ./sysdig-cli-scanner
          echo "running container image scan"
          SECURE_API_TOKEN=${{ secrets.SYSDIG_API_TOKEN }} ./sysdig-cli-scanner --apiurl ${{ secrets.SYSDIG_URL }} ${{ github.event.repository.name }}

#  push-to-registry:
#    needs: [build-and-scan-image]
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v3
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#      - name: Build and push Docker image
#        if: ${{ success() }}
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
